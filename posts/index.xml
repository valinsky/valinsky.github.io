<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Valinsky</title>
        <link>https://valinsky.me/posts/</link>
        <description>Recent content in Posts on Valinsky</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 10 Sep 2021 15:15:12 -0400</lastBuildDate>
        <atom:link href="https://valinsky.me/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>CalyxOS</title>
            <link>https://valinsky.me/posts/calyxos/</link>
            <pubDate>Fri, 10 Sep 2021 15:15:12 -0400</pubDate>
            
            <guid>https://valinsky.me/posts/calyxos/</guid>
            <description>I&amp;rsquo;ve been using CalyxOS for about a month on a Pixel 4a and I love it.
It feels so liberating to use a mobile FOSS OS without all the privacy intruding Google spyware.
Apps While transitioning to CalyxOS I realized I was using many apps that I didn&amp;rsquo;t really need. This was the perfect time get rid of them. The less apps you have on your phone the better.
The apps that I ended up still using work well on CalyxOS.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="https://calyxos.org/">CalyxOS</a> for about a month on a Pixel 4a and I love it.</p>
<p>It feels so liberating to use a mobile FOSS OS without all the privacy intruding Google spyware.</p>
<h3 id="apps">Apps</h3>
<p>While transitioning to CalyxOS I realized I was using many apps that I didn&rsquo;t really need. This was the perfect time get rid of them. The less apps you have on your phone the better.</p>
<p>The apps that I ended up still using work well on CalyxOS. Some require <a href="https://microg.org/">microG</a> because many of them are dependent on Google Services.
A common argument that I hear against de-Googled mobile OS-es is that Google Maps doesn&rsquo;t work well. I&rsquo;ve experienced this with GrapheneOS myself, but on CalyxOS it seems to work ok. Everytime I use it I&rsquo;m greeted with a notification saying &ldquo;Maps won&rsquo;t run unless you update Google Play services.&rdquo; yet I ignore it and continue using the app as I normally would. Google Maps is the only Google app I still use and I&rsquo;m waiting on the day I don&rsquo;t have to use it again, but it&rsquo;s just so good that I haven&rsquo;t found a decent replacement for it yet, sigh.</p>
<p>One app that I find particularly helpful is <a href="https://calyxos.org/about/tech/datura/">Datura Firewall</a> which blocks other apps from having a network connection. This comes in handy when you want to block network access to privacy invasing apps while not in use. Looking at you Google Maps.</p>
<p>When installing apps I first try to see if I can install the .apk directly. If you do this make sure you&rsquo;re not downloading malware. Always validate that the .apk comes from a trusted source before installing it. My second option is to use <a href="https://f-droid.org/">F-Droid</a> which is a great FOSS repo for Android apps. I use <a href="https://f-droid.org/en/packages/com.aurora.store/">Aurora Store</a> as a last resort, although I try to use it as little as possible. Aurora is a FOSS alternative to the Google Play store and you can find most Android apps there. One tip with Aurora is that sometime the app you&rsquo;re searching for might not show up in the search results. If this happens to you, try searching for the Google Play app link in a search engine (ex. DuckDuckGo) and open the link with Aurora.</p>
<h3 id="notifications">Notifications</h3>
<p>Notifications also work well. Haven&rsquo;t had any problems with notification heavy apps like Protonmail, Tutanota, Signal etc. I did experience some problems while on GrapheneOS, some app notifications weren&rsquo;t working or they were arriving late, although I&rsquo;ve heard they work a lot better now.</p>
<h3 id="battery-life">Battery life</h3>
<p>Regarding battery life, it&rsquo;s way, way better than stock Android. I can use the phone for 2 days, while before I was using it for one day. Who would&rsquo;ve thought that by not hitting the Google APIs with all of your data all the time can have such a significant impact on battery life.</p>
<h3 id="calyxos-vs-grapheneos">CalyxOS vs. GrapheneOS</h3>
<p>A quick comparison with GrapheneOS. I find CalyxOS to be more user friendly and the experience has been smooth so far. I think GrapheneOS is an excellent privacy focused OS and the privacy aficionados should give it a try, although my experience with it hasn&rsquo;t been as smooth as with CalyxOS.
Personally I see GrapheneOS being installed on a phone that is used for sensitive information that you mostly keep at home, and CalyxOS as your daily driver. I know that Daniel Micay, the lead developer of GrapheneOS, is continuously working on improving it. One cool feature he added is the <a href="https://grapheneos.org/usage#sandboxed-play-services">Sandboxed Play services</a> which should provide a better overall experience.</p>
<h3 id="conclusion">Conclusion</h3>
<p>In conclusion I recommend CalyxOS. If you&rsquo;re a privacy enthusiast go and check it out. I also recommend <a href="https://sethforprivacy.com/posts/switching-to-calyxos/">this article</a> from Seth. Try out GrapheneOS too if you want to go hard core on privacy.</p>
<p>I don&rsquo;t think I&rsquo;ll ever go back to stock Android after experiencing CalyxOS. And damn it feels good to not have Big Brother breathing down your neck all the time.</p>
]]></content>
        </item>
        
        <item>
            <title>I Built a Twitter Bot</title>
            <link>https://valinsky.me/posts/i-built-a-twitter-bot/</link>
            <pubDate>Sun, 07 Jun 2020 15:15:12 -0400</pubDate>
            
            <guid>https://valinsky.me/posts/i-built-a-twitter-bot/</guid>
            <description>On the 11th of May, 2020, at block height 630.000, the 3rd Bitcoin halving event happened.
For us Bitcoin nerds this was a huge event, not only because it happens every 4 years or because of its economic implications, but also because it shows the beautiful system that Bitcoin has in place, a system that has been working flawlessly since 2009.
To commemorate this event, I thought about creating a Twitter bot that keeps track of how many blocks are left until the next halving.</description>
            <content type="html"><![CDATA[<p>On the 11th of May, 2020, at block height <a href="https://www.blockchain.com/btc/block/000000000000000000024bead8df69990852c202db0e0097c1a12ea637d7e96d">630.000</a>, the 3rd <a href="https://www.bitcoinblockhalf.com/">Bitcoin halving</a> event happened.</p>
<p>For us Bitcoin nerds this was a huge event, not only because it happens every 4 years or because of its economic implications, but also because it shows the beautiful system that Bitcoin has in place, a system that has been working flawlessly since 2009.</p>
<p>To commemorate this event, I thought about creating a Twitter bot that keeps track of how many blocks are left until the next halving. It seemed like a great weekend project, and I wanted to have my own bot for a while.</p>
<h3 id="writing-the-bot">Writing the bot</h3>
<p>I wrote the bot in Python.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> bloxplorer <span style="color:#f92672">import</span> bitcoin_explorer
<span style="color:#f92672">import</span> tweepy


<span style="color:#75715e"># API Access Keys</span>
API_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;api_key&#39;</span>
API_KEY_SECRET <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;api_secret_key&#39;</span>
ACCESS_TOKEN <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;access_token&#39;</span>
ACCESS_TOKEN_SECRET <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;access_token_secret&#39;</span>

HALVING_TIME <span style="color:#f92672">=</span> <span style="color:#ae81ff">210000</span>  <span style="color:#75715e"># blocks</span>


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">progress_bar</span>(percent: float, length: int <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>) <span style="color:#f92672">-&gt;</span> str:
    <span style="color:#75715e"># Return a progress bar: ██████████⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿</span>
    fill <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;█&#39;</span>
    bar <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;⣿&#39;</span> <span style="color:#f92672">*</span> length
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">{</span>fill <span style="color:#f92672">*</span> int((percent <span style="color:#f92672">/</span> <span style="color:#ae81ff">100</span>) <span style="color:#f92672">*</span> length)<span style="color:#e6db74">}{</span>bar<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>[:length]


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">tweet</span>(message: str) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:
    <span style="color:#75715e"># Twitter auth</span>
    auth <span style="color:#f92672">=</span> tweepy<span style="color:#f92672">.</span>OAuthHandler(API_KEY, API_KEY_SECRET)
    auth<span style="color:#f92672">.</span>set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)
    api <span style="color:#f92672">=</span> tweepy<span style="color:#f92672">.</span>API(auth)
    <span style="color:#75715e"># post to Twitter</span>
    api<span style="color:#f92672">.</span>update_status(message)


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    block_height <span style="color:#f92672">=</span> int(bitcoin_explorer<span style="color:#f92672">.</span>blocks<span style="color:#f92672">.</span>get_last_height()<span style="color:#f92672">.</span>data)
    end_time <span style="color:#f92672">=</span> HALVING_TIME

    <span style="color:#66d9ef">while</span> block_height <span style="color:#f92672">&gt;</span> end_time:
        end_time <span style="color:#f92672">+=</span> HALVING_TIME
    start_time <span style="color:#f92672">=</span> end_time <span style="color:#f92672">-</span> HALVING_TIME
    blocks_left <span style="color:#f92672">=</span> end_time <span style="color:#f92672">-</span> block_height
    days_left <span style="color:#f92672">=</span> (blocks_left <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">1440</span>
    percent <span style="color:#f92672">=</span> round(((block_height <span style="color:#f92672">-</span> start_time) <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span>) <span style="color:#f92672">/</span> HALVING_TIME, <span style="color:#ae81ff">2</span>)

    message <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;&#34;&#34;🚀🚀🚀🚀 #bitcoin 🚀🚀🚀🚀
</span><span style="color:#e6db74"></span><span style="color:#e6db74">{</span>progress_bar(percent)<span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">{</span>percent<span style="color:#e6db74">}</span><span style="color:#e6db74">%
</span><span style="color:#e6db74">Blocks left: </span><span style="color:#e6db74">{</span>blocks_left<span style="color:#e6db74">:</span><span style="color:#e6db74">,</span><span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Days left: ~</span><span style="color:#e6db74">{</span>days_left<span style="color:#e6db74">:</span><span style="color:#e6db74">,</span><span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>

    tweet(message)

</code></pre></div><p>The bot uses <a href="https://valinsky.me/posts/bloxplorer/">Bloxplorer</a> to get the current block height, and then it checks to see how many blocks are left until the next halving. At the time of this writing, the next halving will occur at block height 840.000.</p>
<p>I added an ASCII progress bar to show the progress made in terms of percents. Thought that was a neat thing to have in a tweet.</p>
<p>I&rsquo;m also calculating the number of days left. This number is an approximation, because I&rsquo;m using a constant block generation time of 10 minutes, and in reality that is not always the case.</p>
<p>In order to interact with the Twitter API I used <a href="https://github.com/tweepy/tweepy">tweepy</a>.<br>
First I had to go on Twitter and create a <a href="https://developer.twitter.com/en/docs/basics/developer-portal/overview">developer account</a> for myself. Then I had to create a <a href="https://developer.twitter.com/en/docs/basics/apps/overview">developer app</a> which lets me generate the necessary keys to interact with the Twitter API.<br>
After I got the keys, I used them with Tweepy as seen in the <code>tweet</code> function above. With those 4 lines of code I was able to hit the Twitter API to post tweets. Pretty nice.</p>
<p>It&rsquo;s a simple and cute little script, but it does the job.</p>
<h3 id="deploying-the-bot">Deploying the bot</h3>
<p>I wanted the bot to post a tweet every day at a certain time. Enter cloud based cron jobs. Since this is a small pet project, I didn&rsquo;t want to pay for any cloud services. I wanted something simple and free.</p>
<p>Initially I tried using <a href="https://pythonanywhere.com">pythonanywhere.com</a>. It supported python, it had the functionality of scheduling tasks, and it was a freemium service. Exactly what I need.<br>
After I created an account, uploaded my code and created the scheduled task&hellip; it failed. That&rsquo;s because for free accounts <a href="https://pythonanywhere.com">pythonanywhere.com</a> <a href="https://www.pythonanywhere.com/whitelist/">whitelists only certain sites</a>. My bot uses Bloxplorer to make HTTP calls to the <a href="https://github.com/Blockstream/esplora/blob/master/API.md">Blockstream Esplora</a> API to get the current block height. Since that API is not whitelisted, the request didn&rsquo;t go through. Bummer!</p>
<p>Next!</p>
<p>I heard a lot of talk about <a href="https://www.heroku.com/">Heroku</a> during my software engineering career, and now seemed like the perfect time to try it out. Just like <a href="https://pythonanywhere.com">pythonanywhere.com</a>, it had everything I wanted. Again I went through the same song and dance of creating an account, creating an app, pushing my code and scheduling the task with <a href="https://devcenter.heroku.com/articles/scheduler">Heroku Scheduler</a>. This time it worked! Sweet!</p>
<h3 id="btchalvingtimer">@BtcHalvingTimer</h3>
<p>I scheduled the bot to tweet every day at 12:00 AM UTC. I&rsquo;m excited to see the progress bar fill up while we&rsquo;re slowly approaching the 4th Bitcoin halving.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">🚀🚀🚀🚀 <a href="https://twitter.com/hashtag/bitcoin?src=hash&amp;ref_src=twsrc%5Etfw">#bitcoin</a> 🚀🚀🚀🚀<br>⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ 2.75%<br>Blocks left: 204,235<br>Days left: ~1,418</p>&mdash; Bitcoin Halving Timer (@BtcHalvingTimer) <a href="https://twitter.com/BtcHalvingTimer/status/1274854981791858689?ref_src=twsrc%5Etfw">June 22, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
        </item>
        
        <item>
            <title>The Magic of Quake 3&#39;s Fast Inverse Square Root Explained</title>
            <link>https://valinsky.me/posts/quake3-fast-inverse-square-root/</link>
            <pubDate>Sun, 24 Nov 2019 17:24:58 -0500</pubDate>
            
            <guid>https://valinsky.me/posts/quake3-fast-inverse-square-root/</guid>
            <description>This is one of those magical unicorn algorithms.
I was always intrigued by this small piece of code, because it&amp;rsquo;s such a unique and elegant solution to a common problem, and it&amp;rsquo;s part of a game I played a lot as a kid. I did not understand it then, but I do now.
This algorithm estimates the inverse square root, \( 1 / \sqrt{number} \), of a positive 32 bit floating point number.</description>
            <content type="html"><![CDATA[<p>This is one of those magical unicorn algorithms.</p>
<p>I was always intrigued by this small piece of code, because it&rsquo;s such a unique and elegant solution to a common problem, and it&rsquo;s part of a game I played a lot as a kid. I did not understand it then, but I do now.</p>
<p>This algorithm estimates the inverse square root, \( 1 / \sqrt{number} \), of a positive 32 bit floating point number.</p>
<p>Nowadays programmers might think to solve this problem by simply importing a library and calling a function.</p>
<p>But back in 1999 the Quake 3 Arena developers realized it was computationally expensive to calculate the inverse square root of a floating point number on a large scale using traditional methods.</p>
<p>One ninja developer came up with a solution that bypassed this limitation, and the <a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root">Fast inverse square root algorithm</a> was born.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">float</span> <span style="color:#a6e22e">Q_rsqrt</span>( <span style="color:#66d9ef">float</span> number )
{
    <span style="color:#66d9ef">long</span> i;
    <span style="color:#66d9ef">float</span> x2, y;
    <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span> threehalfs <span style="color:#f92672">=</span> <span style="color:#ae81ff">1.5F</span>;

    x2 <span style="color:#f92672">=</span> number <span style="color:#f92672">*</span> <span style="color:#ae81ff">0.5F</span>;
    y  <span style="color:#f92672">=</span> number;
    i  <span style="color:#f92672">=</span> <span style="color:#f92672">*</span> ( <span style="color:#66d9ef">long</span> <span style="color:#f92672">*</span> ) <span style="color:#f92672">&amp;</span>y;                       <span style="color:#75715e">// evil floating point bit level hacking
</span><span style="color:#75715e"></span>    i  <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5f3759df</span> <span style="color:#f92672">-</span> ( i <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span> );               <span style="color:#75715e">// what the fuck? 
</span><span style="color:#75715e"></span>    y  <span style="color:#f92672">=</span> <span style="color:#f92672">*</span> ( <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span> ) <span style="color:#f92672">&amp;</span>i;
    y  <span style="color:#f92672">=</span> y <span style="color:#f92672">*</span> ( threehalfs <span style="color:#f92672">-</span> ( x2 <span style="color:#f92672">*</span> y <span style="color:#f92672">*</span> y ) );   <span style="color:#75715e">// 1st iteration
</span><span style="color:#75715e">//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> y;
}
</code></pre></div><p>The function makes use of <a href="https://en.wikipedia.org/wiki/Newton%27s_method">Newton’s method</a>. Newton’s method is used for finding better approximations to the roots of a mathematical function.</p>
<p>It looks like this:</p>
<p>$$ x_{1} = x_{0} - \frac{f(x_{0})}{f'(x_{0})} $$</p>
<p>\( x_{0} \) is an initial approximation, and the formula generates \( x_{1} \) which is an even better approximation. The more iterations you perform, the better the approximation.</p>
<p>We want to find the value of \( 1 / \sqrt{number} \), so we are looking for a solution to the equation \( f(x) = x^{-2} - number \). Take your best guess as to what the solution would be, and call it \( x_{0} \). We are only interested in the positive solution.</p>
<p>We now know that \( f(x_{0}) \) is \( x_{0}^{-2} - number \). For clarification, <strong>number</strong> is the number which we want to find the inverse square root for, the input parameter to our C function above.</p>
<p>Our Newton method now becomes:</p>
<p>$$ x_{1} = x_{0} - \frac{x_{0}^{-2} - number}{-2 x_{0}^{-3}} $$</p>
<p>After some algebraic magic (feel free to compute the result yourself), our equation becomes:</p>
<p>$$ x_{1} = x_{0}(\frac{3}{2} - \frac{1}{2} * x_{0}^{2} * number) $$</p>
<p>This is similar to line 12 in the C code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">y  <span style="color:#f92672">=</span> y <span style="color:#f92672">*</span> ( threehalfs <span style="color:#f92672">-</span> ( x2 <span style="color:#f92672">*</span> y <span style="color:#f92672">*</span> y ) );   <span style="color:#75715e">// 1st iteration
</span></code></pre></div><p>Remember when I asked you to guess the first approximation, \( x_{0} \)? Well, how do we get the value for it?</p>
<p>Simple answer… magic.</p>
<p>To quote Gary Tarolli, who (very modestly) takes partial credit for writing the function:</p>
<blockquote>
<p>Which actually is doing a floating point computation in integer - it took a long time to figure out how and why this works, and I can&rsquo;t remember the details anymore.</p>
</blockquote>
<p>It is not known how the exact value of the magic number <strong>0x5f3759df</strong> was determined.<br>
What is known is that, if we take our input number and divide it by 2 (<a href="https://en.wikipedia.org/wiki/Bitwise_operations_in_C#Right_shift_%3E%3E">shift it to the right by 1</a>), and then subtract this number from the magic number, we get a really good first estimate.</p>
<p>To note, the input number is a <code>float</code>. In order to divide by 2 by shifting the bits to the right, it is converted into a <code>long</code> integer. Then it is converted back into a <code>float</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">i  <span style="color:#f92672">=</span> <span style="color:#f92672">*</span> ( <span style="color:#66d9ef">long</span> <span style="color:#f92672">*</span> ) <span style="color:#f92672">&amp;</span>y;                       <span style="color:#75715e">// evil floating point bit level hacking
</span><span style="color:#75715e"></span>i  <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5f3759df</span> <span style="color:#f92672">-</span> ( i <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span> );               <span style="color:#75715e">// what the fuck? 
</span><span style="color:#75715e"></span>y  <span style="color:#f92672">=</span> <span style="color:#f92672">*</span> ( <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span> ) <span style="color:#f92672">&amp;</span>i;
</code></pre></div><p>This estimate, which is \( x_{0} \) in our mathematical function above, is then used in calculating the next approximation. The result is so close to the desired value, that a second iteration is not even needed anymore, as denoted by the commented code on line 13.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    y  <span style="color:#f92672">=</span> y <span style="color:#f92672">*</span> ( threehalfs <span style="color:#f92672">-</span> ( x2 <span style="color:#f92672">*</span> y <span style="color:#f92672">*</span> y ) );   <span style="color:#75715e">// 1st iteration
</span><span style="color:#75715e">//  y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed
</span></code></pre></div><p>You can read more about the Fast inverse square root <a href="https://www.beyond3d.com/content/articles/8">here</a> and <a href="https://www.beyond3d.com/content/articles/15">here</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>How to configure your Github Pages website with your custom Godaddy domain</title>
            <link>https://valinsky.me/posts/github-pages-with-custom-godaddy-domain/</link>
            <pubDate>Sun, 17 Nov 2019 10:54:46 -0500</pubDate>
            
            <guid>https://valinsky.me/posts/github-pages-with-custom-godaddy-domain/</guid>
            <description>You can use your own custom domain with GitHub Pages, instead of GitHub&amp;rsquo;s &amp;lt;username&amp;gt;.github.io domain. This GitHub Pages post covers the domain configuration steps.
If you bought the domain on GoDaddy, I&amp;rsquo;m going to show you the exact GoDaddy DNS configuration you need.
Go to your godaddy.com domain, and find the Manage DNS option.
GoDaddy Manage DNS  Add these settings.
GoDaddy DNS configuration  My website is hosted on GitHub under the valinsky.</description>
            <content type="html"><![CDATA[<p>You can use your own custom domain with <a href="https://pages.github.com/">GitHub Pages</a>, instead of GitHub&rsquo;s <strong>&lt;username&gt;.github.io</strong> domain. <a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site">This GitHub Pages post</a> covers the domain configuration steps.<br>
If you bought the domain on GoDaddy, I&rsquo;m going to show you the exact GoDaddy DNS configuration you need.</p>
<p>Go to your <a href="https://godaddy.com">godaddy.com</a> domain, and find the <em>Manage DNS</em> option.</p>

    <figure class="center" >
        <img src="/images/github_pages_godaddy_domain/manage_dns_setting.png"   />

        
            <figcaption class="center" >GoDaddy Manage DNS</figcaption>
        
    </figure>


<p>Add these settings.</p>

    <figure class="center" >
        <img src="/images/github_pages_godaddy_domain/github_pages_godaddy_config_good.png"   />

        
            <figcaption class="center" >GoDaddy DNS configuration</figcaption>
        
    </figure>


<p>My website is hosted on GitHub under the <strong>valinsky.github.io</strong> domain. You&rsquo;ll have to update the CNAME with your own <strong>&lt;username&gt;.github.io</strong> domain.</p>
<p>You&rsquo;ll then be greeted with this message in your GitHub respository&rsquo;s settings, right under the GitHub Pages section.</p>

    <figure class="center" >
        <img src="/images/github_pages_godaddy_domain/github_pages_https_not_available.png"   />

        
            <figcaption class="center" >HTTPS Not Available</figcaption>
        
    </figure>


<p>Like the message says, you have to wait <em>24 hours</em> for the internet to magically issue an <a href="https://www.digicert.com/ssl-certificate/">HTTPS SSL certificate</a> for you.</p>
<p>That was not the case for me.</p>
<!-- raw HTML omitted -->
<h3 id="make-sure-you-unpark-your-domain">Make sure you unpark your domain</h3>
<p>Even though your certificate is not issued, you can still access your website through HTTP.<br>
Never do that! Never serve your website through HTTP. <a href="https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https">Read why.</a></p>
<p>When I was setting up my own custom domain for this website, I waited 24 hours, then another 24 hours, and yet another 24 hours, but the certificate wasn&rsquo;t getting issued.</p>
<p>I soon realized the problem was with GoDaddy&rsquo;s DNS configuration.</p>
<p>My initial configuration looked like this.</p>

    <figure class="center" >
        <img src="/images/github_pages_godaddy_domain/github_pages_godaddy_config_bad.png"   />

        
            <figcaption class="center" >GoDaddy DNS parked configuration</figcaption>
        
    </figure>


<p>Those two DNS entries were setup by GoDaddy, and I didn&rsquo;t pay much attention to them initially. If you see these in your own DNS configuration, be sure to remove them, or else you&rsquo;ll end up with a <a href="https://en.wikipedia.org/wiki/Domain_parking">parked domain</a> that won&rsquo;t work with your GitHub Pages setup.</p>
<p>After I removed those entries, a few hours later my HTTPS SSL certificate was issued and I was able to activate it.</p>

    <figure class="center" >
        <img src="/images/github_pages_godaddy_domain/activate_https.png"   />

        
            <figcaption class="center" >HTTPS Enforced</figcaption>
        
    </figure>


<p>And that&rsquo;s it.</p>
<p>Now you have a website hosted by GitHub and configured with your own custom GoDaddy DNS.</p>
]]></content>
        </item>
        
    </channel>
</rss>
